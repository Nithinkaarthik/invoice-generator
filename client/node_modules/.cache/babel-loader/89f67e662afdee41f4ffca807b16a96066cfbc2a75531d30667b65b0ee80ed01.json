{"ast":null,"code":"import axios from 'axios';\n\n// Define API base URL that works in both development and production\nconst API_URL = process.env.NODE_ENV === 'production' ? '/api' : 'https://invoice-pink-eight.vercel.app/api';\n\n// Define interfaces for our data\n\n// Create API service class\nexport const invoiceApi = {\n  // Get all invoices\n  getInvoices: async () => {\n    const response = await axios.get(`${API_URL}/invoices/`);\n    return response.data;\n  },\n  // Get invoices by client name\n  getInvoicesByClient: async clientName => {\n    const response = await axios.get(`${API_URL}/invoices/?client=${clientName}`);\n    return response.data;\n  },\n  // Get a specific invoice by ID\n  getInvoiceById: async id => {\n    const response = await axios.get(`${API_URL}/invoices/${id}`);\n    return response.data;\n  },\n  // Create a new invoice\n  createInvoice: async invoice => {\n    try {\n      console.log('API: Sending invoice data to server:', JSON.stringify(invoice));\n      const response = await axios.post(`${API_URL}/invoices/`, invoice);\n      console.log('API: Server response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('API Error details:', error);\n\n      // Extract error message from response if available\n      if (axios.isAxiosError(error) && error.response) {\n        console.error('Server error response:', error.response.data);\n        if (error.response.data && error.response.data.error) {\n          throw new Error(error.response.data.error);\n        }\n      }\n\n      // If we couldn't extract a specific error message, throw a generic one\n      throw new Error('Failed to save invoice. Please check your connection and try again.');\n    }\n  },\n  // Generate PDF for an invoice\n  generatePdf: async id => {\n    const response = await axios.get(`${API_URL}/invoices/generate-pdf/${id}`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","NODE_ENV","invoiceApi","getInvoices","response","get","data","getInvoicesByClient","clientName","getInvoiceById","id","createInvoice","invoice","console","log","JSON","stringify","post","error","isAxiosError","Error","generatePdf"],"sources":["D:/PROJECTS FINAL/invoice-generator/client/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define API base URL that works in both development and production\r\nconst API_URL = process.env.NODE_ENV === 'production' \r\n  ? '/api' \r\n  : 'https://invoice-pink-eight.vercel.app/api';\r\n\r\n// Define interfaces for our data\r\nexport interface LineItem {\r\n  name: string;\r\n  quantity: number;\r\n  rate: number;\r\n  total: number;\r\n}\r\n\r\nexport interface Invoice {\r\n  _id?: string;\r\n  client_name: string;\r\n  items: LineItem[];\r\n  tax_percentage: number;\r\n  discount: number;\r\n  subtotal?: number;\r\n  tax_amount?: number;\r\n  final_total?: number;\r\n  invoice_number?: string;\r\n  created_at?: Date;\r\n}\r\n\r\n// Create API service class\r\nexport const invoiceApi = {\r\n  // Get all invoices\r\n  getInvoices: async (): Promise<Invoice[]> => {\r\n    const response = await axios.get(`${API_URL}/invoices/`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get invoices by client name\r\n  getInvoicesByClient: async (clientName: string): Promise<Invoice[]> => {\r\n    const response = await axios.get(`${API_URL}/invoices/?client=${clientName}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get a specific invoice by ID\r\n  getInvoiceById: async (id: string): Promise<Invoice> => {\r\n    const response = await axios.get(`${API_URL}/invoices/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create a new invoice\r\n  createInvoice: async (invoice: Invoice): Promise<any> => {\r\n    try {\r\n      console.log('API: Sending invoice data to server:', JSON.stringify(invoice));\r\n      const response = await axios.post(`${API_URL}/invoices/`, invoice);\r\n      console.log('API: Server response:', response.data);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      console.error('API Error details:', error);\r\n      \r\n      // Extract error message from response if available\r\n      if (axios.isAxiosError(error) && error.response) {\r\n        console.error('Server error response:', error.response.data);\r\n        \r\n        if (error.response.data && error.response.data.error) {\r\n          throw new Error(error.response.data.error);\r\n        }\r\n      }\r\n      \r\n      // If we couldn't extract a specific error message, throw a generic one\r\n      throw new Error('Failed to save invoice. Please check your connection and try again.');\r\n    }\r\n  },\r\n\r\n  // Generate PDF for an invoice\r\n  generatePdf: async (id: string): Promise<any> => {\r\n    const response = await axios.get(`${API_URL}/invoices/generate-pdf/${id}`);\r\n    return response.data;\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACjD,MAAM,GACN,2CAA2C;;AAE/C;;AAqBA;AACA,OAAO,MAAMC,UAAU,GAAG;EACxB;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAgC;IAC3C,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,OAAO,YAAY,CAAC;IACxD,OAAOM,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,mBAAmB,EAAE,MAAOC,UAAkB,IAAyB;IACrE,MAAMJ,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,OAAO,qBAAqBU,UAAU,EAAE,CAAC;IAC7E,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAG,cAAc,EAAE,MAAOC,EAAU,IAAuB;IACtD,MAAMN,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,OAAO,aAAaY,EAAE,EAAE,CAAC;IAC7D,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAK,aAAa,EAAE,MAAOC,OAAgB,IAAmB;IACvD,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,CAAC;MAC5E,MAAMR,QAAQ,GAAG,MAAMP,KAAK,CAACoB,IAAI,CAAC,GAAGnB,OAAO,YAAY,EAAEc,OAAO,CAAC;MAClEC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEV,QAAQ,CAACE,IAAI,CAAC;MACnD,OAAOF,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOY,KAAU,EAAE;MACnBL,OAAO,CAACK,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;;MAE1C;MACA,IAAIrB,KAAK,CAACsB,YAAY,CAACD,KAAK,CAAC,IAAIA,KAAK,CAACd,QAAQ,EAAE;QAC/CS,OAAO,CAACK,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACd,QAAQ,CAACE,IAAI,CAAC;QAE5D,IAAIY,KAAK,CAACd,QAAQ,CAACE,IAAI,IAAIY,KAAK,CAACd,QAAQ,CAACE,IAAI,CAACY,KAAK,EAAE;UACpD,MAAM,IAAIE,KAAK,CAACF,KAAK,CAACd,QAAQ,CAACE,IAAI,CAACY,KAAK,CAAC;QAC5C;MACF;;MAEA;MACA,MAAM,IAAIE,KAAK,CAAC,qEAAqE,CAAC;IACxF;EACF,CAAC;EAED;EACAC,WAAW,EAAE,MAAOX,EAAU,IAAmB;IAC/C,MAAMN,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,OAAO,0BAA0BY,EAAE,EAAE,CAAC;IAC1E,OAAON,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}